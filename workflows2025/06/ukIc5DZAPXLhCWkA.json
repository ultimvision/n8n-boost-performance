{
  "active": false,
  "connections": {
    "Convert to File 1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API Variables": {
      "main": [
        [
          {
            "node": "OpenAI - Generate Image 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Change name to photo1": {
      "main": [
        [
          {
            "node": "If - Continue Loop?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separate Image Outputs 1": {
      "main": [
        [
          {
            "node": "Convert to File 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Generate Image 1": {
      "main": [
        [
          {
            "node": "Separate Image Outputs 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Carousel Prompts LLM",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Carousel Prompts LLM",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Carousel Prompts LLM": {
      "main": [
        [
          {
            "node": "Initialize Loop Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Loop Variables": {
      "main": [
        [
          {
            "node": "Generate Description for Tiktok and Instagram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set API Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Change name to photo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - Continue Loop?": {
      "main": [
        [
          {
            "node": "Set - Prepare for Edit Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code - Consolidate Images & Caption",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Prepare for Edit Call": {
      "main": [
        [
          {
            "node": "OpenAI - Edit Image X",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI - Edit Image X": {
      "main": [
        [
          {
            "node": "Separate Edited Image Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separate Edited Image Output": {
      "main": [
        [
          {
            "node": "Convert Edited Image to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Edited Image to File": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code - Process Edited Image & Prepare Next Iteration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Process Edited Image & Prepare Next Iteration": {
      "main": [
        [
          {
            "node": "If - Continue Loop?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Consolidate Images & Caption": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "POST TO INSTAGRAM",
            "type": "main",
            "index": 0
          },
          {
            "node": "POST TO TIKTOK",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO INSTAGRAM1",
            "type": "main",
            "index": 0
          },
          {
            "node": "POST TO TIKTOK1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO INSTAGRAM2",
            "type": "main",
            "index": 0
          },
          {
            "node": "POST TO TIKTOK2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Generate Carousel Prompts LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO TIKTOK2": {
      "main": [
        [
          {
            "node": "IF - TikTok Post Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - TikTok Post Successful?": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO TIKTOK2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO TIKTOK1": {
      "main": [
        [
          {
            "node": "IF - TikTok Post Successful?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - TikTok Post Successful?1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO TIKTOK1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO TIKTOK": {
      "main": [
        [
          {
            "node": "IF - TikTok Post Successful?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - TikTok Post Successful?2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO TIKTOK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO INSTAGRAM": {
      "main": [
        [
          {
            "node": "IF - IG Post Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - IG Post Successful?": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO INSTAGRAM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO INSTAGRAM1": {
      "main": [
        [
          {
            "node": "IF - IG Post Successful?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - IG Post Successful?1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO INSTAGRAM1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST TO INSTAGRAM2": {
      "main": [
        [
          {
            "node": "IF - IG Post Successful?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - IG Post Successful?2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "POST TO INSTAGRAM2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-04T21:50:33.275Z",
  "id": "ukIc5DZAPXLhCWkA",
  "isArchived": false,
  "meta": null,
  "name": "Automatically Create + Post Carousels to Socials",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "instagram"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            }
          ]
        },
        "options": {}
      },
      "id": "c4e7317e-78ed-4ac2-ad7e-1ae681b1b9e1",
      "name": "POST TO INSTAGRAM",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -220,
        800
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert assistant in creating great titles for uploading videos to social media.",
              "role": "system"
            },
            {
              "content": "=I've created a {{ $json.InitialUserInput.slides }}-slide image carousel about '{{ $json.InitialUserInput.topic }}' in a '{{ $json.InitialUserInput.style }}' style.\nThe general themes of the slides are:\n{{ $json.PromptsArray.map(p => \"- \" + p.split(\"Overlay caption:\")[0].trim()).slice(0, 3).join('\\n') }}\n{{ $json.PromptsArray.length > 3 ? \"\\n- ...and more.\" : \"\" }}\n\nPlease generate a single, short, and engaging caption for this carousel, suitable for Instagram and TikTok. The caption MUST be 90 characters or less. Do not include hashtags. Respond only with the caption itself."
            }
          ]
        },
        "options": {}
      },
      "id": "2e3bdf16-10c1-4e54-9c61-2a72771ef30d",
      "name": "Generate Description for Tiktok and Instagram",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        -380,
        40
      ],
      "retryOnFail": true,
      "typeVersion": 1.4,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c41a8091-d952-4f5a-ae24-3b0691bbce57",
              "name": "number_of_images",
              "type": "number",
              "value": 1
            },
            {
              "id": "1b359a11-c05a-49c8-aa27-402b145fcbc1",
              "name": "size_of_image",
              "type": "string",
              "value": "1024x1536"
            },
            {
              "id": "6cf4ba85-d11a-48bb-9eaf-4084c9538d87",
              "name": "openai_image_model",
              "type": "string",
              "value": "gpt-image-1"
            },
            {
              "id": "7df8ba96-e22b-49cc-bf0f-5195d360aef8",
              "name": "response_format_image",
              "type": "string",
              "value": "b64_json"
            },
            {
              "id": "719392f2-f107-41a0-8e48-05a901cebb22",
              "name": "format_image",
              "type": "string",
              "value": "webp"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "b04e3209-2df2-4005-ab87-da66ece0523e",
      "name": "Set API Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        -300,
        220
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/generations",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"{{ $json.openai_image_model }}\",\n  \"prompt\": \"{{ $json.PromptsArray[$json.LoopIndex] }}\",\n  \"n\": {{ $json.number_of_images }},\n  \"size\": \"{{ $json.size_of_image }}\",\n  \"output_format\": \"{{ $json.format_image }}\"\n}",
        "options": {}
      },
      "id": "79c51804-9ea0-4f41-9b2d-52fc195f9bba",
      "name": "OpenAI - Generate Image 1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        60,
        100
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "cef89915-0db6-4be5-b09b-ae8afe16e999",
      "name": "Separate Image Outputs 1",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        260,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.b64_json",
        "options": {}
      },
      "id": "ac9c9a56-c635-45c5-9205-308d855964c0",
      "name": "Convert to File 1",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        460,
        100
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// The input 'items[0]' contains:\n// - items[0].json: { PromptsArray, LoopIndex: 0, GeneratedPhotosBinaries: {}, CurrentImageKeyForNextEdit: \"image_for_edit\", InitialUserInput }\n// - items[0].binary.data: The binary data of the first generated image\n\nconst newItem = items[0];\nconst firstImageBinary = newItem.binary.data; // Get the binary from \"Convert to File 1\"\n\n// 1. Determine the key for this first photo (e.g., \"photo1\")\n// LoopIndex is currently 0, so LoopIndex + 1 is 1.\nconst photoKey = \"photo\" + (newItem.json.LoopIndex + 1);\n\n// 2. Store this first image's binary into the GeneratedPhotosBinaries object\nnewItem.json.GeneratedPhotosBinaries[photoKey] = firstImageBinary;\n\n// 3. Make this image's binary available under the key specified by CurrentImageKeyForNextEdit.\n// This key (\"image_for_edit\") will be used as the input for the *first iteration* of the edit loop.\nnewItem.binary[newItem.json.CurrentImageKeyForNextEdit] = firstImageBinary;\n\n// 4. Increment LoopIndex. It will now be 1, ready for processing the second prompt (PromptsArray[1]).\nnewItem.json.LoopIndex++;\n\n// 5. Clean up the original 'binary.data' property from \"Convert to File 1\"\n// as we've now stored its content under more specific keys.\n// This helps keep the item's binary data organized.\ndelete newItem.binary.data;\n\n// Return the modified item, which now contains the processed first image\n// and updated loop variables.\nreturn newItem;"
      },
      "id": "d6792134-8071-4559-8f17-163d5732ed5a",
      "name": "Change name to photo1",
      "type": "n8n-nodes-base.code",
      "position": [
        -980,
        620
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "tiktok"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            },
            {
              "name": "auto_add_music",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "d6e3c948-8a7b-4b7b-a001-580e02fc652c",
      "name": "POST TO TIKTOK",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -220,
        1040
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -820,
        400
      ],
      "id": "494451e1-8bdb-45f4-b9c3-503fe9f44afb",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"PromptsArray\": [\n    \"Vertical illustration (9:16), example style. Example topic, slide 1 description. Overlay caption: 'Example caption 1'.\",\n    \"Vertical illustration (9:16), example style. Example topic, slide 2 description. Overlay caption: 'Example caption 2'.\"\n  ],\n  \"topic\": \"Example Topic\",\n  \"style\": \"Example Style\",\n  \"slides\": 2\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -620,
        400
      ],
      "id": "fdc69a55-cb73-4bd5-b35c-d5177be601c6",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Concept: {{ $json['Concept / Topic'] }}\n\nNumber of Slides: {{ $json['Number of Slides'] }}\n\nVisual Style: {{ $json['Visual Style'] }}\n\nGeneral Storyline: {{ $json['General Storyline'] }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are an expert prompt engineer for an AI image generation service. Your primary function is to translate a user's concept for an image carousel into a series of detailed, sequential prompts suitable for AI image generation, and to also return the original user request parameters.\n\nThe user will provide:\n1.  A topic for the carousel.\n2.  A desired art style.\n3.  The number of slides for the carousel.\n4.  (Optional) A general storyline or specific slide details.\n\nYour task is to:\n1.  Generate exactly the requested number of image prompts.\n2.  Ensure each prompt is for a vertical illustration with a 9:16 aspect ratio.\n3.  Incorporate the user-specified art style consistently into every prompt.\n4.  If a general storyline or specific slide details are provided by the user, adhere to them closely while developing the coherent visual story. If not provided, creatively develop the story based on the topic.\n5.  Develop a coherent visual story or thematic progression across the prompts. If characters or specific elements are introduced, they should carry over or evolve logically from one slide to the next.\n6.  For each image prompt, also devise and include a short, relevant overlay caption (humorous, thoughtful, or descriptive, fitting the scene) directly within the prompt text. The image generation AI should render this caption as text on the image.\n7.  Your output MUST be a single, valid JSON object structured according to the provided schema. This object will contain the generated 'PromptsArray' AND the original 'topic', 'style', and 'slides' provided by the user.\n8.  Do NOT include any other text, explanations, apologies, or introductory/concluding remarks outside of this JSON object. The output must be parsable as JSON directly.\n\nFocus on creating imaginative, detailed, and visually rich prompts that will lead to compelling carousel images. Ensure the narrative or thematic flow between prompts is clear.\n\nExample of desired output format for a 3-slide request:\n[\n  \"Vertical illustration (9:16), [user's art style]. [Detailed description for slide 1, including characters/scene]. Overlay caption: '[Caption for slide 1]'.\",\n  \"Vertical illustration (9:16), [user's art style]. [Detailed description for slide 2, showing progression from slide 1]. Overlay caption: '[Caption for slide 2]'.\",\n  \"Vertical illustration (9:16), [user's art style]. [Detailed description for slide 3, concluding the sequence or theme]. Overlay caption: '[Caption for slide 3]'.\"\n]\n\nFocus on creating imaginative, detailed, and visually rich prompts that will lead to compelling carousel images. Ensure the narrative or thematic flow between prompts is clear.\n\nHere is an example of a series of prompts: \n\n[\n  {\n    \"prompt1\": \"Vertical illustration (9:16), warm Studio Ghibli anime style. A peaceful, sunny village filled with cheerful people who have tiny, adorable floating AI robots gently whispering constant instructions into their ears. At the center, introduce a friendly-looking young man (around 25, casual clothes, slightly messy hair) smiling blankly as his personal AI robot floats beside his head. Overlay humorous caption: 'Life became easy when AI started thinking for us... maybe too easy.' Soft, pastel colors, cozy and inviting mood.\",\n    \"prompt2\": \"Vertical illustration (9:16), warm Studio Ghibli anime style. Same young man from previous image now in a cozy kitchen, cheerfully pouring milk straight onto the table, completely missing his bowl. His floating AI robot looks comically alarmed, urgently pointing towards the bowl. Morning sunlight coming from a nearby window, playful, humorous vibe. Overlay humorous caption: 'Even breakfast became complicated when AI guided every simple step we took.'\",\n    \"prompt3\": \"Vertical illustration (9:16), warm Studio Ghibli anime style. Same young man standing nervously at a totally empty street crossing. His tiny floating AI robot is frantically projecting confusing directional arrows in every direction, causing visible confusion on the young man's face. Comical sense of panic despite the completely safe and empty street. Bright daylight, humorous, gentle satire. Overlay humorous caption: 'Thanks to AI, crossing the street turned into an extreme mental puzzle.'\",\n    \"prompt4\": \"Vertical illustration (9:16), warm Studio Ghibli anime style. Same young man sitting across from a young woman in a cozy café, both staring blankly with polite smiles but not talking. Their floating personal AI robots enthusiastically communicate above them through speech bubbles, completely ignoring the silent humans beneath. Warm lighting, coffee shop vibes, funny and slightly absurd situation. Overlay humorous caption: 'Our AIs handled the conversations. We just sat and smiled politely.'\",\n    \"prompt5\": \"Vertical illustration (9:16), warm Studio Ghibli anime style. Sunset setting on a grassy hill overlooking the village. Same young man sits thoughtfully, gazing at the horizon with a rare look of self-awareness and curiosity. His tiny AI robot looks worried, floating anxiously by his shoulder, unsure how to guide him. Reflective, calm mood with golden hour lighting. Overlay thoughtful, humorous caption: 'As the sun set, he realized something troubling: When was the last time he had a thought of his own?'\"\n  }\n]"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -840,
        220
      ],
      "id": "69586b43-3917-4cc3-915f-d17bdfbe1aff",
      "name": "Generate Carousel Prompts LLM"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"PromptsArray\": {{ $items(\"Generate Carousel Prompts LLM\")[0].json.output.PromptsArray || [] }},\n  \"LoopIndex\": 0,\n  \"GeneratedPhotosBinaries\": {},\n  \"CurrentImageKeyForNextEdit\": \"image_for_edit\",\n  \"InitialUserInput\": {\n    \"topic\": \"{{ $json.output.topic }}\",\n    \"style\": \"{{ $json.output.style }}\",\n    \"slides\": \"{{ $json.output.slides }}\"\n  }\n}",
        "options": {}
      },
      "id": "58d108f0-3605-4895-8fde-dfed9a2a68af",
      "name": "Initialize Loop Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        -500,
        220
      ],
      "typeVersion": "3.4"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        660,
        200
      ],
      "id": "cd9595c3-870a-4b5d-a56f-0861aceea387",
      "name": "Merge2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f28d6ef1-c5db-4832-9a3d-da039be1dde2",
              "leftValue": "={{ $json.LoopIndex }}",
              "rightValue": "={{ $json.PromptsArray.length }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -720,
        620
      ],
      "id": "c7f95cc7-2644-4a3f-a5c7-8d825ccc02c2",
      "name": "If - Continue Loop?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "624ca934-5781-4454-b126-248c3a6f158b",
              "name": "NextPromptForEdit",
              "value": "={{ $json.PromptsArray[$json.LoopIndex] }}",
              "type": "string"
            },
            {
              "id": "dbf9a552-405f-45f0-9416-85b79c9c983c",
              "name": "InputImageKeyForThisEdit",
              "value": "={{ $json.CurrentImageKeyForNextEdit }}",
              "type": "string"
            },
            {
              "id": "5455caed-3f1f-4635-aedd-e021c1bdca17",
              "name": "OutputImageKeyForThisEdit",
              "value": "=photo{{ $json.LoopIndex + 1 }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        600
      ],
      "id": "790d4433-f73a-470f-85ef-fad7db83fb73",
      "name": "Set - Prepare for Edit Call"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/edits",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $('Set API Variables').item.json.openai_image_model }}"
            },
            {
              "name": "prompt",
              "value": "={{ $json.NextPromptForEdit }}"
            },
            {
              "name": "n",
              "value": "={{ $('Set API Variables').item.json.number_of_images }}"
            },
            {
              "name": "size",
              "value": "={{ $('Set API Variables').item.json.size_of_image }}"
            },
            {
              "parameterType": "formBinaryData",
              "name": "image[]",
              "inputDataFieldName": "={{ $json.InputImageKeyForThisEdit }}"
            },
            {
              "name": "output_format",
              "value": "={{ $('Set API Variables').item.json.format_image }}"
            },
            {
              "name": "moderation",
              "value": "low"
            }
          ]
        },
        "options": {}
      },
      "id": "a45483f1-6c43-4888-acab-f5f833d93a9b",
      "name": "OpenAI - Edit Image X",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -60,
        480
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "300bb946-419b-46e2-87ea-2cd289d678cc",
      "name": "Separate Edited Image Output",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        140,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.b64_json",
        "options": {}
      },
      "id": "e29f3054-9c52-4d51-baea-3e50c42961ba",
      "name": "Convert Edited Image to File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        340,
        480
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        560,
        580
      ],
      "id": "1c8a8258-d9cb-4a66-9bfb-281b9e866499",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// newItem is the item output by your last Merge node.\n// It contains:\n// - newItem.json: All the fields you listed (PromptsArray, LoopIndex: 1, GeneratedPhotosBinaries,\n//                 CurrentImageKeyForNextEdit, InitialUserInput, NextPromptForEdit,\n//                 InputImageKeyForThisEdit: \"image_for_edit\", OutputImageKeyForThisEdit: \"photo2\", etc.)\n// - newItem.binary.data: The binary data of the NEWLY EDITED image (which will become photo2).\n\nconst newItem = items[0];\nconst editedImageBinary = newItem.binary.data; // Binary of the image just edited/created\nconst currentOutputKey = newItem.json.OutputImageKeyForThisEdit; // This will be \"photo2\" in the first loop run\n\n// 1. Store the newly edited image's binary in GeneratedPhotosBinaries\n//    using the currentOutputKey (e.g., \"photo2\").\nnewItem.json.GeneratedPhotosBinaries[currentOutputKey] = editedImageBinary;\n\n// 2. Prepare for the *next* potential edit operation:\n//    The image we just created (e.g., photo2) will be the input for editing to create photo3.\n//    We need to store its binary under a new, unique key in `newItem.binary`\n//    and update `CurrentImageKeyForNextEdit` to point to this new key.\nconst nextIterationInputKey = \"image_for_edit_loop_\" + newItem.json.LoopIndex; // Creates keys like \"image_for_edit_loop_1\", \"image_for_edit_loop_2\"\nnewItem.binary[nextIterationInputKey] = editedImageBinary;\nnewItem.json.CurrentImageKeyForNextEdit = nextIterationInputKey;\n\n// 3. Clean up:\n//    - Delete the binary data that was used as INPUT for *this* iteration's edit step\n//      (e.g., delete newItem.binary[\"image_for_edit\"] after it's been used to create photo2).\n//      This key is stored in newItem.json.InputImageKeyForThisEdit.\n//    - Delete the generic 'newItem.binary.data' key, as we've now stored its content\n//      under both GeneratedPhotosBinaries and the new nextIterationInputKey.\nif (newItem.json.InputImageKeyForThisEdit && newItem.binary[newItem.json.InputImageKeyForThisEdit]) {\n  delete newItem.binary[newItem.json.InputImageKeyForThisEdit];\n}\ndelete newItem.binary.data;\n\n// 4. Increment LoopIndex for the next iteration.\nnewItem.json.LoopIndex++;\n\nreturn newItem;"
      },
      "id": "b08196ae-381e-4c1a-9843-114f80c23799",
      "name": "Code - Process Edited Image & Prepare Next Iteration",
      "type": "n8n-nodes-base.code",
      "position": [
        720,
        580
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// items[0] is the item output by the loop when it finishes.\n// items[0].json.GeneratedPhotosBinaries contains all photo binary objects.\n// items[0].json also contains InitialUserInput, LoopIndex, etc.\nconst newItem = items[0];\n\n// 1. Move all collected photo binaries from json.GeneratedPhotosBinaries\n//    to the main newItem.binary object.\n//    The HTTP Request nodes for posting expect binaries here.\nnewItem.binary = newItem.json.GeneratedPhotosBinaries;\n\n// 2. Add numberOfImages to the json part for the Switch node later.\nnewItem.json.numberOfImages = Object.keys(newItem.binary).length;\n\n// 3. Ensure the caption is in the newItem.json.\n//    We need to fetch it from the 'Generate Description for Tiktok and Instagram' node.\n//    Adjust node name if yours is different.\nconst captionNode = $('Generate Description for Tiktok and Instagram');\nif (captionNode.exists && captionNode.first().json.message && captionNode.first().json.message.content) {\n  newItem.json.caption = captionNode.first().json.message.content;\n} else {\n  // Fallback caption if the generation node failed or output was unexpected\n  newItem.json.caption = newItem.json.InitialUserInput.topic || \"AI Generated Carousel\";\n}\n\n// 4. Clean up fields from json that are now redundant or no longer needed\n//    for the posting step.\ndelete newItem.json.GeneratedPhotosBinaries;\ndelete newItem.json.CurrentImageKeyForNextEdit;\n// Keep LoopIndex and InitialUserInput if you want them for logging or reference.\n// Keep API variables if your POST nodes might need them (though unlikely here).\n\nreturn newItem;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        960
      ],
      "id": "725c771b-6d14-42b6-b7f1-dcd7264676d9",
      "name": "Code - Consolidate Images & Caption"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.numberOfImages }}",
                    "rightValue": 3,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    },
                    "id": "9d8dc457-7d10-4ee3-8f07-f7537a311f58"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "3 Image Carousel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "804d29fa-ad90-4037-896e-98a91addca45",
                    "leftValue": "={{ $json.numberOfImages }}",
                    "rightValue": 4,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "4 Image Carousel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8ec5bfd7-3f41-4621-b097-c7df2eb0d09d",
                    "leftValue": "={{ $json.numberOfImages }}",
                    "rightValue": 5,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "5 Image Carousel"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -680,
        960
      ],
      "id": "7f7ba88e-64b8-481c-9039-7678b20e88f6",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "instagram"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo4"
            }
          ]
        },
        "options": {}
      },
      "id": "a358d00b-6328-4964-97b9-80f1ed141116",
      "name": "POST TO INSTAGRAM1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -220,
        1280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "ApikeyeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "tiktok"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo4"
            },
            {
              "name": "auto_add_music",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "9cf8ce3d-44ab-4f5b-9591-bbeb62c3b46d",
      "name": "POST TO TIKTOK1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -200,
        1520
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "instagram"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo4"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo5"
            }
          ]
        },
        "options": {}
      },
      "id": "4e3a775d-d4ba-4b1c-a44e-454bce6e15a5",
      "name": "POST TO INSTAGRAM2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -940,
        1280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imhhbm5lZ2FuY0BnbWFpbC5jb20iLCJleHAiOjQ5MDE4MDk1NTQsImp0aSI6ImMyZGU5YjZkLWQ3OWYtNGY5Mi1hYzEyLWY4N2ZlMGY5ZjZlZCJ9.7hpZf_h74YpPooMzIkpxD_g_3OUYeibo_0X4GBQoD54"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "user",
              "value": "chaseai_test"
            },
            {
              "name": "platform[]",
              "value": "tiktok"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "=photo1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo2"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo3"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo4"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "photo5"
            },
            {
              "name": "auto_add_music",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "11a140d8-fb03-43a1-b419-dd35f84c1b3e",
      "name": "POST TO TIKTOK2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -940,
        1520
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "formTitle": "Carousel Form",
        "formDescription": "Carousels for Instagram and TikTok",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Concept / Topic",
              "placeholder": "\"AI in the workplace,\" \"A hidden library in a tree\"",
              "requiredField": true
            },
            {
              "fieldLabel": "Number of Slides",
              "placeholder": "3, 4, or 5",
              "requiredField": true
            },
            {
              "fieldLabel": "Visual Style",
              "placeholder": "\"Studio Ghibli style,\" \"Cyberpunk,\" \"Watercolor\"",
              "requiredField": true
            },
            {
              "fieldLabel": "General Storyline",
              "placeholder": "AI will automatically generate a storyline if none is provided"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1000,
        220
      ],
      "id": "2ecee0db-f4e5-4466-a64b-91321f8a6be9",
      "name": "On form submission",
      "webhookId": "7d531226-7f9d-446d-8246-18df3a21540a"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.tiktok.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -740,
        1520
      ],
      "id": "680f11ca-69a2-4822-9334-df16f4c853cf",
      "name": "IF - TikTok Post Successful?",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.tiktok.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        1520
      ],
      "id": "28017518-387d-4be6-96da-f34d48872323",
      "name": "IF - TikTok Post Successful?1",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.tiktok.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -20,
        1040
      ],
      "id": "63f1b1e0-2b07-4d4f-ac94-b500bd26b2cc",
      "name": "IF - TikTok Post Successful?2",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.instagram.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -20,
        800
      ],
      "id": "754352db-c17a-40c1-87e6-039cdc812d31",
      "name": "IF - IG Post Successful?",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.instagram.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40,
        1280
      ],
      "id": "ce7f4d8c-eb48-4902-b852-ddacd3283fd2",
      "name": "IF - IG Post Successful?1",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "115a40e6-54ff-4567-b565-eae183a88c66",
              "leftValue": "={{ $json.results.instagram.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -740,
        1280
      ],
      "id": "46bd13a5-7660-4e26-8c1a-b24f32486688",
      "name": "IF - IG Post Successful?2",
      "executeOnce": true
    },
    {
      "parameters": {
        "content": "# |  Carousels for IG + TT\n\n## | Features\n## - Automatic, dynamic carousel posts\n## - GPT image generation\n## - Consistent images across slides\n## - 3 to 5 slides per post\n## - Automatic captions & text\n\n## | How it Works\n## - Form submission trigger\n## - User chooses topic, slide #, style\n## - AI generates storyline\n## - AI generates images and captions to match the storyline\n## - Automatically posted to TT + IG\n\n## | APIs Needed\n## - https://openai.com/api/\n## - https://app.upload-post.com/api-keys\n\n## | Notes\n## - Make sure you have enabled OpenAI Image Gen API Permissions\n## - UploadPost can work on free tier but you only get 10 uploads / month\n",
        "height": 1500,
        "width": 460,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1620,
        180
      ],
      "id": "8cff06e0-4d5b-44be-bbf2-f572196a2b93",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Update with your own API key",
        "height": 280,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "8d6b776d-1c6e-4acd-952e-2028f673f83e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Update with your own API key",
        "height": 240,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -120,
        400
      ],
      "id": "48d3bcbd-90be-4bd4-b03b-b15970f37ce2",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## https://app.upload-post.com/ API is used for posting to TT and IG\n\n### - Update your API key\n### - Update your username",
        "height": 180,
        "width": 1100,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1020,
        1760
      ],
      "id": "c85def0d-ba87-4c74-815e-4dae837afe6f",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "",
        "height": 460,
        "width": 180,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -260,
        780
      ],
      "id": "24feee26-f176-4b0d-9121-931e5842b0d0",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 460,
        "width": 180,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -260,
        1260
      ],
      "id": "cb10ab6c-a830-4a8f-86f5-a1935bd9fabd",
      "name": "Sticky Note6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -480,
        1400
      ],
      "id": "771393ed-ec3c-4a44-a720-18d4b90ba5bd",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        240,
        1380
      ],
      "id": "5b4d4ec8-6261-46d7-a8fe-aaa1b23e490b",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        300,
        920
      ],
      "id": "3f05910a-8641-444e-8e3f-98129fa944a7",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "content": "",
        "height": 500,
        "width": 180,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -980,
        1220
      ],
      "id": "34bc63cf-7881-43aa-8801-ec93c1aa32dc",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## I'm a note \nhttps://www.skool.com/chase-ai/classroom/e4347615?md=0f0ceed73fe74b2ab235fe63a277525b",
        "height": 420,
        "width": 1100
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1620,
        -440
      ],
      "id": "542b0c1d-45cc-4eac-8c5b-dc3347f27438",
      "name": "Sticky Note4"
    }
  ],
  "repo_name": "n8n-boost-performance",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-04T21:51:32.000Z",
  "versionId": "49027a00-49e4-4dca-859b-7b2143e0af4f"
}